name: Deploy to Vercel

on:
  workflow_run:
    workflows: ["Docker Build & Push"]
    types:
      - completed
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy-to-vercel:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Clean Vercel configs
        run: |
          rm -rf .vercel
      
      - name: Link to existing Vercel project
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --scope ${{ secrets.VERCEL_ORG_ID }} --project allan-lannoy-portfolio
      
      - name: Create .env file
        run: |
          echo "VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}" > .env
          echo "VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}" >> .env
          echo "VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}" >> .env
      
      - name: Create vercel.json
        run: |
          cat > vercel.json << EOF
          {
            "version": 2,
            "github": {
              "enabled": false
            },
            "buildCommand": "npm run build",
            "outputDirectory": "dist",
            "routes": [
              { "handle": "filesystem" },
              { "src": "/assets/(.*)", "headers": { "cache-control": "public, max-age=31536000, immutable" } },
              { "src": "/(.*\\\\.(js|css|svg|png|jpg|jpeg|gif|webp|ico))", "headers": { "cache-control": "public, max-age=31536000" } },
              { "src": "/(.*)", "dest": "/index.html" }
            ]
          }
          EOF
      
      - name: Deploy to Vercel Preview
        if: github.event_name == 'pull_request'
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --yes > vercel_output.txt
          PREVIEW_URL=$(cat vercel_output.txt)
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV
          echo "::notice title=Preview Deployment::Your app is deployed at $PREVIEW_URL"
      
      - name: Deploy to Vercel Production
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
        run: |
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes > vercel_output.txt
          PRODUCTION_URL=$(cat vercel_output.txt)
          echo "PRODUCTION_URL=$PRODUCTION_URL" >> $GITHUB_ENV
          echo "::notice title=Production Deployment::Your app is deployed at $PRODUCTION_URL"
      
      - name: Deployment Status
        run: |
          if [[ -n "$PRODUCTION_URL" ]]; then
            echo "Production deployment successful: $PRODUCTION_URL"
          elif [[ -n "$PREVIEW_URL" ]]; then
            echo "Preview deployment successful: $PREVIEW_URL"
          else
            echo "Deployment did not produce a URL"
            if [ -f vercel_output.txt ]; then
              echo "Vercel output:"
              cat vercel_output.txt
            fi
          fi